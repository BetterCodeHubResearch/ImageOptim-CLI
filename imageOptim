#!/bin/sh

# Copyright © 2013 Jamie Mason, @GotNoSugarBaby,
# https://github.com/JamieMason

# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# path to image directory we should optimise
imgPath=$1

# path to this script
cliPath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# how long we will wait before checking again if ImageOptim.app is busy
isBusyIntervalLength=1

# image types supported by ImageOptim.app
fileTypes='.*(bmp|gif|jpeg|jpg|pcx|png|pnm|tga|tiff)'

# ($1:message): Display a red error message and quit
function error {
  printf "\e[31m✘ $1"
  echo "\033[0m"
  exit 1
}

# ($1:message): Display a message in green with a tick by it
function success {
  printf "\e[32m✔ ${1}"
  echo "\033[0m"
}

# (): Get a timestamp for the current time
function now {
  echo $(date -j -f "%a %b %d %T %Z %Y" "`date`" "+%s")
}

# ($1:appName): Get the number of processes in use by an Application
function countProcesses {
  printf $(ps -aef | grep  "[${1:0:1}]${1:1}" | wc -l)
}

# (): Sleep until ImageOptim.app is done optimising images
function waitForImageOptim {
  # wait for ImageOptim to spawn a few processes
  sleep 2
  # wait until those processes have completed
  while [[ "$(countProcesses "ImageOptim")" > "1" ]]; do
    sleep $isBusyIntervalLength
  done
}

# (): How long did ImageOptim.app take to process the images?
function getTimeSpent {
  let timeSpent=endTime-startTime-$isBusyIntervalLength
  echo $timeSpent
}

# (): How many images are in the directory we're about to process?
function getImgCount {
  echo $(find -E "$imgPath" -iregex $fileTypes | wc -l)
}

# (): Send all images to ImageOptim.app for processing
function queueImgs {
  find -E "$imgPath" -regex $fileTypes -print0 | while IFS= read -r -d $'\0' img; do
    open -a ImageOptim.app "$img"
  done
}

# quit if ImageOptim is not installed
if [ "ImageOptim.app" != `osascript "$cliPath/isImageOptimInstalled.applescript"` ]; then
  error "ImageOptim is not installed (http://imageoptim.com)"
fi

# quit if imgPath is not set
if [ -z "$imgPath" ]; then
  error "usage:\n  imageOptim ./path/to/directory"
fi

# quit if imgPath is not a directory
if [ ! -d "$imgPath" ]; then
  error "Could not find $imgPath"
fi

# begin
startTime=$(now)
$(queueImgs)
$(waitForImageOptim)
endTime=$(now)
success "Optimised $(getImgCount) images in $(getTimeSpent) seconds" | xargs
