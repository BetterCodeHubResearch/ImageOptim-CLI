#!/bin/sh

# Copyright © 2013 Jamie Mason, @GotNoSugarBaby,
# https://github.com/JamieMason

# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# ($1:message) -> message
function echoFail {
  printf "\e[31m✘ $1"
  echo "\033[0m"
}

# ($1:message) -> message
function echoPass {
  printf "\e[32m✔ $1"
  echo "\033[0m"
}

# ($1:message) -> message
function echoItem {
  printf "\e[36m• $1"
  echo "\033[0m"
}

# ($1:binary, $2:message) -> formatted
function echoIf {
  if [ $1 == 1 ]; then
    echoPass $2
  else
    echoFail $2
  fi
}

# ($1:portion, $2:whole) -> percent
function percent {
  local portion=$1
  local whole=$2
  echo $(bc <<< "scale=2; (($portion/$whole)*100)")
}

# ($1:bytes) -> kilobytes
# (1500) -> 1.500
function toKb {
  local bytes=$1
  echo $(bc <<< "scale=3; $bytes/1000")
}

# ($1:larger, $2:smaller) -> difference
function difference {
  local larger=$1
  local smaller=$2
  echo $(bc <<< "scale=3; $larger-$smaller")
}

# ($1:number) -> formatted
# (10000) -> 10,000
function formatNumber {
  local number=$1
  printf "%'.3f\n" $number
}

# ($1:path) -> bytes
# (/path/to/some_file.txt) -> 11496328
function sizeInBytes {
  local path=$1
  stat -f %z $path
}

function echoBytes {
  local size=$1
  echo $(formatNumber $(toKb $size))" KB"
}

# ($1:path) -> formatted
# (/path/to/some_file.txt) -> 11,496.328 KB
function echoSize {
  local path=$1
  echo $(echoBytes $(sizeInBytes $path))
}

# ($1:original, $2:optimised, $3:optimiserName) -> result
# (/path/to/some.jpg, /path/to/some.jpegoptim.jpg, "jpegoptim") -> "jpegoptim: 1.730 KB (84.00%)"
function echoResult {
  local original=$1
  local optimised=$2
  local optimiserName=$3
  local originalSize=$(sizeInBytes $original)
  local optimisedSize=$(sizeInBytes $optimised)
  local byteReduction=$(difference $originalSize $optimisedSize)
  local percentageReduction=$(percent $byteReduction $originalSize)
  echo "$optimiserName: $(echoSize $optimised) ($percentageReduction%%)"
}

# ($1:original, $2:extension, $3:subExtension) -> newFilename
# (/path/to/some_file.txt, "txt", "ext") -> "some_file.ext.txt"
function assignNameToCopy {
  local original=$1
  local extension=$2
  local subExtension=$3
  echo $1 | sed -e "s/\.$extension/.$subExtension.$extension/g"
}

# ($1:fileName) -> formatted
function echoFile {
  local fileName=$1
  echo "$fileName ($(echoSize $fileName))"
}

# ======================================================================

# sumOriginal=0
# sumAdvpng=0
# sumGifsicle=0
# sumJpegoptim=0
# sumJpegtran=0
# sumOptipng=0
# sumPngcrush=0
# sumPngout=0

# ($1:memo, $2:originalFile, $3:optimisedFile)
# function incrementOptimisedTotal {
#   echo $(bc <<< "scale=3; ($1+$(difference $1 $2))")
# }

# function totalSavings {
#   echo $(bc <<< "scale=3; ($total-$totalOptimised)")
# }

# function echoTotal {
#   echo "Total: $(formatNumber $(toKb $(totalSavings))) KB ($(percent $total $totalOptimised)%%)"
# }

# ======================================================================

# ($1:fileName, $2:extension, $3:optimiser, $4:optimiserName)
function applyOptimisation {
  local fileName=$1
  local extension=$2
  local optimiser=$3
  local optimiserName=$4
  local copyName=$(assignNameToCopy $fileName $extension $optimiserName)

  $optimiser $fileName $copyName > /dev/null 2>&1
  # echoResult $fileName $copyName $optimiserName
}

# ($1:fileName, $2:optimiserName)
function handleOutput {
  local fileName=$1
  local firstFile=0
  for copyName in `find -E $scope -regex '.*(advpng|gifsicle|jpegoptim|jpegtran|optipng|pngcrush|pngout).*' | sort -rn`; do
    # if smallest file
    if [ $firstFile == 0 ]; then
      # increment totals
      totalSizeBefore=$(bc <<< "scale=0; $totalSizeBefore+$(sizeInBytes $fileName)")
      totalSizeAfter=$(bc <<< "scale=0; $totalSizeAfter+$(sizeInBytes $copyName)")
      mv $copyName $fileName
      firstFile=1
    else
      rm $copyName
    fi
  done
}

function optimiseFile {
  local fileName=$1
  local extension=$2
  declare -a optimiserNames=("${!3}")

  for (( i=0 ; i<${#optimiserNames[@]}; i++ )); do
    local optimiserName="${optimiserNames[$i]}"
    eval local optimiser="${optimiserName}Bridge"
    $optimiser $fileName $extension
  done

  handleOutput $fileName $optimiserName
}

function optimiseFilesByType {
  local extension=$1
  declare -a optimiserNames=("${!2}")

  for fileName in `find $scope -name "*.$extension"`; do
    local sizeBefore=$(sizeInBytes $fileName)
    optimiseFile $fileName $extension optimiserNames[@]
    local sizeAfter=$(sizeInBytes $fileName)
    local bytesRemoved=$(difference $sizeBefore $sizeAfter)
    local kilobytesRemoved=$(toKb $bytesRemoved)
    local percentRemoved=$(percent $bytesRemoved $sizeBefore)
    echo "Removed ${kilobytesRemoved} KB (${percentRemoved}%) from ${fileName}"
  done
}

function optimiseFiles {
  optimiseFilesByType "bmp" bmpOptimisers[@]
  optimiseFilesByType "gif" gifOptimisers[@]
  optimiseFilesByType "jpeg" jpegOptimisers[@]
  optimiseFilesByType "jpg" jpgOptimisers[@]
  optimiseFilesByType "pcx" pcxOptimisers[@]
  optimiseFilesByType "png" pngOptimisers[@]
  optimiseFilesByType "pnm" pnmOptimisers[@]
  optimiseFilesByType "tga" tgaOptimisers[@]
  optimiseFilesByType "tiff" tiffOptimisers[@]

  local totalBytesRemoved=$(difference $totalSizeBefore $totalSizeAfter)
  local totalKilobytesRemoved=$(toKb $totalBytesRemoved)
  local totalPercentRemoved=$(percent $totalBytesRemoved $totalSizeBefore)

  echo "---------------------------------------------------"
  echo "Removed ${totalKilobytesRemoved} KB (${totalPercentRemoved}%) from ${scope}"
}

# ======================================================================
# optipng (bmp, gif, png, pnm, tiff)
# ======================================================================

# ($1:fileName, $2:copyName)
function optipngCommand {
  cp $1 $2
  ${bin}/optipng -quiet -o7 $2
}

# ($1:fileName, $2:extension)
function optipngBridge {
  applyOptimisation $1 $2 optipngCommand "optipng"
}

# ======================================================================
# advpng (png)
# ======================================================================

# ($1:fileName, $2:copyName)
function advpngCommand {
  cp $1 $2
  ${bin}/advpng --quiet --recompress --shrink-insane $2
}

# ($1:fileName, $2:extension)
function advpngBridge {
  applyOptimisation $1 $2 advpngCommand "advpng"
}

# ======================================================================
# jpegoptim (jpg, jpeg)
# ======================================================================

# ($1:fileName, $2:copyName)
function jpegoptimCommand {
  cp $1 $2
  ${bin}/jpegoptim -q --strip-all -t -o $2
}

# ($1:fileName, $2:extension)
function jpegoptimBridge {
  applyOptimisation $1 $2 jpegoptimCommand "jpegoptim"
}

# ======================================================================
# pngout (bmp, gif, jpg, jpeg, pcx, png, tga)
# ======================================================================

# ($1:fileName, $2:copyName)
function pngoutCommand {
  ${bin}/pngout -q -y $1 $2
}

# ($1:fileName, $2:extension)
function pngoutBridge {
  applyOptimisation $1 $2 pngoutCommand "pngout"
}

# ======================================================================
# pngcrush (png)
# ======================================================================

# ($1:fileName, $2:copyName)
function pngcrushCommand {
  ${bin}/pngcrush -q -rem allb -brute -force -q $1 $2
}

# ($1:fileName, $2:extension)
function pngcrushBridge {
  applyOptimisation $1 $2 pngcrushCommand "pngcrush"
}

# ======================================================================
# gifsicle (gif)
# ======================================================================

# ($1:fileName, $2:copyName)
function gifsicleCommand {
  ${bin}/gifsicle -O3 $1 -o $2
}

# ($1:fileName, $2:extension)
function gifsicleBridge {
  applyOptimisation $1 $2 gifsicleCommand "gifsicle"
}

# ======================================================================
# jpegtran (jpg, jpeg)
# ======================================================================

# ($1:fileName, $2:copyName)
function jpegtranCommand {
  ${bin}/jpegtran -copy none -optimize -verbose -outfile $2 $1
}

# ($1:fileName, $2:extension)
function jpegtranBridge {
  applyOptimisation $1 $2 jpegtranCommand "jpegtran"
}

# ======================================================================
# Initialise
# ======================================================================

# path to optimiser library
bin="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/lib"

# path to image directory we should optimise
scope=$1

#
bmpOptimisers=(optipng pngout)
gifOptimisers=(gifsicle)
jpegOptimisers=(jpegoptim jpegtran)
jpgOptimisers=(jpegoptim jpegtran)
pcxOptimisers=(pngout)
pngOptimisers=(advpng optipng pngcrush pngout)
pnmOptimisers=(optipng)
tgaOptimisers=(pngout)
tiffOptimisers=(optipng)

# size of files before optimisation
totalSizeBefore=0

# size of files after optimisation
totalSizeAfter=0

# if it's a valid directory
if [ -d $scope ]; then
  optimiseFiles
else
  echoFail "Could not find $scope"
  exit 1
fi
