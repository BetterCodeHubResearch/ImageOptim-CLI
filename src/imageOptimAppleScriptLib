#!/bin/osascript

-- Copyright Â© 2013 Jamie Mason, @GotNoSugarBaby,
-- https://github.com/JamieMason

-- Permission is hereby granted, free of charge, to any person
-- obtaining a copy of this software and associated documentation files
-- (the "Software"), to deal in the Software without restriction,
-- including without limitation the rights to use, copy, modify, merge,
-- publish, distribute, sublicense, and/or sell copies of the Software,
-- and to permit persons to whom the Software is furnished to do so,
-- subject to the following conditions:

-- The above copyright notice and this permission notice shall be
-- included in all copies or substantial portions of the Software.

-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-- NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
-- BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
-- ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-- CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.

on logInfo(message)
  log "[INFO] " & message
end logInfo

on logVerbose(message)
  if VERBOSE equals true then
   log "[VERBOSE] " & message
  end if
end logVerbose

(*
 * @description
 * Check whether access for assistive devices is enabled under System
 * Preferences, needed to perform synthetic user actions so JPEGmini can be
 * automated.
 *
 * Enable access for assistive devices in Mavericks;
 * http://www.tekrevue.com/how-to-enable-access-for-assistive-devices-in-os-x-mavericks/
 *
 * Enable access for assistive devices in Yosemite;
 * https://thequantumself.wordpress.com/2014/06/26/enable-access-for-assistive-devices-in-osx-yosmite/
 *
 * @return  {Boolean}
 *)
on supportsAssistiveDevices()
  tell application "System Events"
    set isEnabled to UI elements enabled
  end tell
  return isEnabled as boolean
end supportsAssistiveDevices

(*
 * @description
 * Is the app with this bundle id installed somewhere on this machine?
 *
 * @param   {String}   bundleId  eg. ID_IMAGEOPTIM
 * @return  {Boolean}
 *)
on isInstalled(bundleId)
  try
    tell application "Finder" to get application file id bundleId
    return true
  on error
    return false
  end try
end isInstalled

(*
 * @description
 * Get the absolute path to a .app already known to be installed.
 *
 * @param   {String}   bundleId  eg. ID_IMAGEOPTIM
 * @return  {String}             eg. "/Applications/ImageOptim.app/"
 *)
on getAppPath(bundleId)
  try
    tell application "Finder"
      return "/Applications/" & (name of application file id bundleId) & "/"
    end tell
  on error
    error bundleId & " is not installed in /Applications"
  end try
end getAppPath

(*
 * @description
 * Find the appropriate JPEGmini bundle id, starting with the paid-for plans
 * down to the free one.
 *
 * @return  {String}  eg. ID_JPEGMINI_PRO
 *)
on getJpegMiniBundleId()
  if isInstalled(ID_JPEGMINI_PRO) then
    return ID_JPEGMINI_PRO
  else if isInstalled(ID_JPEGMINI) then
    return ID_JPEGMINI
  else if isInstalled(ID_JPEGMINI_RETAIL) then
    return ID_JPEGMINI_RETAIL
  else if isInstalled(ID_JPEGMINI_LITE) then
    return ID_JPEGMINI_LITE
  end if
  return ""
end getJpegMiniBundleId

(*
 * @description
 * Find the appropriate JPEGmini app name, starting with the paid-for plans
 * down to the free one.
 *
 * @return  {String}  eg. "JPEGmini Pro"
 *)
on getJpegMiniAppName()
  if isInstalled(ID_JPEGMINI_PRO) then
    return "JPEGmini Pro"
  else if isInstalled(ID_JPEGMINI) or isInstalled(ID_JPEGMINI_RETAIL) then
    return "JPEGmini"
  else if isInstalled(ID_JPEGMINI_LITE) then
    return "JPEGmini Lite"
  end if
  return ""
end getJpegMiniAppName

(*
 * @description
 * Quit this app once we're done with it.
 *
 * @param  {String}  appName  eg. "ImageOptim"
 *)
on quitApp(appName)
  logVerbose("Quitting " & appName)
  tell application appName to quit
end quitApp

(*
 * @description
 * Run ImageAlpha over the contents of DIRECTORY_PNG.
 *)
on runImageAlpha()
  if isInstalled(ID_IMAGEALPHA) then
    logInfo("Running ImageAlpha")
    set pngquant to getAppPath(ID_IMAGEALPHA) & "Contents/Resources/pngquant"
    (* do shell script *)
    logVerbose("find '" & DIRECTORY_PNG & "' -type f -print0 | xargs -n10 -P8 -0 '" & pngquant & "' --ext=.png --force --speed=1 --skip-if-larger --quality=75-100 --")
  end if
end runImageAlpha

(*
 * @description
 * Run ImageOptim over the contents of DIRECTORY_TEMP.
 *)
on runImageOptim()
  if isInstalled(ID_IMAGEOPTIM) then
    logInfo("Running ImageOptim")
    set imageOptim to getAppPath(ID_IMAGEOPTIM) & "Contents/MacOS/ImageOptim"
    (* do shell script *)
    logVerbose(imageOptim & " 2> /dev/null " & DIRECTORY_TEMP)
    (* QUIT WHEN FINISHED *)
    if QUIT_APPS_ON_COMPLETE then
      quitApp("ImageOptim")
    end if
  end if
end runImageOptim

(*
 * @description
 * Run JPEGmini <variant> over the contents of DIRECTORY_JPG.
 *)
on runJPEGmini()
  (* DETERMINE WHICH VERSION IS INSTALLED *)
  set JPEGmini to getJpegMiniAppName()
  (* QUIT IF NOT INSTALLED *)
  if JPEGmini is "" then
    error ERROR_JPEGMINI_UNAVAILABLE
    return
  end if
  logInfo("Running " & JPEGmini)
  (* CHECK GUI SCRIPTING IS ENABLED *)
  if supportsAssistiveDevices() is false then
    error ERROR_GUISCRIPT_UNAVAILABLE
    return
  end if
  (* OPEN AND FOCUS JPEGMINI *)
  tell application JPEGmini
    activate
    delay 3
    activate
  end tell
  (* SPAWN THE FILE > OPEN MENU *)
  tell application "System Events"
    keystroke "o" using {command down}
    delay 3
    keystroke "g" using {command down, shift down}
    delay 2
  end tell
  (* NAVIGATE TO OUR FOLDER OF IMAGES *)
  tell application "System Events"
    tell process JPEGmini
      set value of text field 1 of sheet 1 of sheet 1 of window 1 to DIRECTORY_JPG
      repeat
        if (value of text field 1 of sheet 1 of sheet 1 of window 1) is not equal to DIRECTORY_JPG then
          delay 1
        else
          exit repeat
        end if
      end repeat
      -- give Finder time to resolve the path
      delay 2
      -- start optimising (>= Yosemite)
      click button "Go" of sheet 1 of window 1
      -- start optimising (<= Mavericks)
      click button "Open" of sheet 1 of window 1
    end tell
  end tell
  (* WAIT FOR JPEGMINI TO FINISH RUNNING *)
  tell application "System Events"
    set timesIdle to 0
    repeat
      -- get all process information | filtered to JPEGmini
      set getRawProcess to "ps aux | grep '/Applications/" & JPEGmini & "'"
      -- filter out JPEGmini grep | get column 3 of output (% CPU)
      set filterRawProcess to "grep -v grep | awk '{print $3}'"
      -- store above pipe chain in a variable
      set getRawCpu to "RAWCPU=$(" & getRawProcess & " | " & filterRawProcess & ")"
      -- round that variable to a whole number
      set outputRoundedCpu to "$(printf \"%.0f\" $(echo \"scale=2;$RAWCPU\" | bc))"
      -- join the two commands and echo it out to applescript
      set getCpuPercent to getRawCpu & " && echo " & outputRoundedCpu
      -- get raw terminal string output
      set cpuPercent to (do shell script getCpuPercent) as number
      -- give the app a little time to work
      delay 0.5
      -- if the app is idle
      if (cpuPercent) < 1 then
        -- increment number of times we've found the app consecutively idle
        set timesIdle to timesIdle + 1
        -- if it's been idle for long enough we can exit
        if (timesIdle) > 2 then
          exit repeat
        end if
      end if
      -- (implied else: by not exiting we repeat again)
    end repeat
  end tell
  (* QUIT WHEN FINISHED *)
  if QUIT_APPS_ON_COMPLETE then
    quitApp(JPEGmini)
  end if
end runJPEGmini

(*
 * @description
 * Handle command-line arguments.
 *
 * @example
 * ./imageOptimAppleScriptLib "<action>" "<quitAfter>"
 *)
on run argv

  (* INITIALISE GLOBALS *)

  global DIRECTORY_TEMP
  set DIRECTORY_TEMP to "/Users/jdog/Desktop/images/" -- do shell script "echo $TMPDIR"

  global DIRECTORY_GIF
  set DIRECTORY_GIF to DIRECTORY_TEMP & "gif"

  global DIRECTORY_JPG
  set DIRECTORY_JPG to DIRECTORY_TEMP & "jpg"

  global DIRECTORY_PNG
  set DIRECTORY_PNG to DIRECTORY_TEMP & "png"

  global ERROR_GUISCRIPT_UNAVAILABLE
  set ERROR_GUISCRIPT_UNAVAILABLE to "To automate JPEGmini we need to enable GUI Scripting. Check 'Enable access for assistive devices' under Accessibility in System Preferences, then run ImageOptim-CLI again"

  global ERROR_IMAGEALPHA_UNAVAILABLE
  set ERROR_IMAGEALPHA_UNAVAILABLE to "Unable to find ImageAlpha (http://pngmini.com)"

  global ERROR_IMAGEOPTIM_UNAVAILABLE
  set ERROR_IMAGEOPTIM_UNAVAILABLE to "Unable to find ImageOptim (http://imageoptim.com)"

  global ERROR_JPEGMINI_UNAVAILABLE
  set ERROR_JPEGMINI_UNAVAILABLE to "Unable to find JPEGmini, JPEGmini Lite, or JPEGmini Pro (https://itunes.apple.com/us/app/jpegmini/id498944723)"

  global ID_IMAGEALPHA
  set ID_IMAGEALPHA to "net.pornel.ImageAlpha"

  global ID_IMAGEOPTIM
  set ID_IMAGEOPTIM to "net.pornel.ImageOptim"

  global ID_JPEGMINI
  set ID_JPEGMINI to "com.icvt.JPEGmini"

  global ID_JPEGMINI_LITE
  set ID_JPEGMINI_LITE to "com.icvt.JPEGminiLite"

  global ID_JPEGMINI_PRO
  set ID_JPEGMINI_PRO to "com.icvt.JPEGminiPro"

  global ID_JPEGMINI_RETAIL
  set ID_JPEGMINI_RETAIL to "com.icvt.JPEGmini-retail"

  global QUIT_APPS_ON_COMPLETE
  set QUIT_APPS_ON_COMPLETE to false

  global VERBOSE
  set VERBOSE to true

  (* HANDLE COMMAND LINE ARGUMENTS *)

  set action to item 1 of argv
  set quitAfter to item 2 of argv

  (* TOGGLE QUITTING *)
  if quitAfter equals "true" then
    set QUIT_APPS_ON_COMPLETE to true
  end if

  (* PERFORM ACTION *)

  if action is "runImageAlpha" then
    runImageAlpha()
  else if action is "runImageOptim" then
    runImageOptim()
  else if action is "runJPEGmini" then
    runJPEGmini()
  else
    error "imageOptimAppleScriptLib '<action>' '<quitAfter>'"
  end if

end run
