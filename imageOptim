#!/bin/sh

# Copyright © 2013 Jamie Mason, @GotNoSugarBaby,
# https://github.com/JamieMason

# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# get library of optimisers relative to this file
bin="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/lib"

# the path we should optimise
scope=$1

function init {
  if [ -d $scope ]; then
    echo ""
  else
    echo_fail "Could not find $scope"
    exit 1
  fi
}

# ($1:message) -> message
function echo_fail {
  printf "\e[31m✘ $1"
  echo "\033[0m"
}

# ($1:message) -> message
function echo_pass {
  printf "\e[32m✔ $1"
  echo "\033[0m"
}

# ($1:message) -> message
function echo_item {
  printf "\e[36m$1"
  echo "\033[0m"
}

# ($1:binary, $2:message) -> formatted
function echo_if {
  if [ $1 == 1 ]; then
    echo_pass $2
  else
    echo_fail $2
  fi
}

# exit if dir to process is missing
init

# ($1:portion, $2:whole) -> percent
function percent {
  echo $(bc <<< "scale=2; (($1/$2)*100)")
}

# ($1:bytes) -> kilobytes
# (1500) -> 1.500
function to_kb {
  echo $(bc <<< "scale=3; $1/1000")
}

# ($1:larger, $2:smaller) -> difference
function difference {
  echo $(bc <<< "scale=3; $1-$2")
}

# ($1:number) -> formatted
# (10000) -> 10,000
function format_number {
  printf "%'.3f\n" $1
}

# ($1:path) -> bytes
# (/path/to/some_file.txt) -> 11496328
function size_in_bytes {
  stat -f %z "$1"
}

# ($1:path) -> formatted
# (/path/to/some_file.txt) -> 11,496.328 KB
function echo_size {
  echo $(format_number $(to_kb $(size_in_bytes "$1")))" KB"
}

# ($1:original, $2:optimised, $3:optimiser_name) -> result
# (/path/to/some.jpg, /path/to/some.jpegoptim.jpg, "jpegoptim") -> "jpegoptim: 1.730 KB (84.00%)"
function echo_result {
  echo_item "• $3: $(echo_size $2) ($(percent $(difference $(size_in_bytes "$1") $(size_in_bytes "$2")) $(size_in_bytes "$1"))%%)"
}

# ($1:original, $2:extension, $3:sub_extension) -> new_filename
# (/path/to/some_file.txt, "txt", "ext") -> "some_file.ext.txt"
function add_sub_extension {
  echo "$1" | sed -e "s/\.$2/.$3.$2/g"
}

# ($1:file) -> formatted
function echo_file {
  echo "$1 ($(echo_size $1))"
}

# ==========================================================================

# optipng (bmp, gif, png, pnm, tiff)
function use_optipng {
  local renamed=$(add_sub_extension "$1" $2 "optipng")
  cp "$1" "$renamed"
  ${bin}/optipng -quiet -o7 "$renamed" > /dev/null 2>&1
  echo_result "$1" $renamed "optipng"
}

# pngout (bmp, gif, jpg, jpeg, pcx, png, tga)
function use_pngout {
  local renamed=$(add_sub_extension "$1" $2 "pngout")
  ${bin}/pngout -q -y "$1" "$renamed" > /dev/null 2>&1
  echo_result "$1" $renamed "pngout"
}

# advpng (png)
function use_advpng {
  local renamed=$(add_sub_extension "$1" $2 "advpng")
  cp "$1" "$renamed"
  ${bin}/advpng --quiet --recompress --shrink-insane "$renamed" > /dev/null 2>&1
  echo_result "$1" $renamed "advpng"
}

# pngcrush (png)
function use_pngcrush {
  local renamed=$(add_sub_extension "$1" $2 "pngcrush")
  ${bin}/pngcrush -q -rem allb -brute -force -q "$1" "$renamed" > /dev/null 2>&1
  echo_result "$1" $renamed "pngcrush"
}

# gifsicle (gif)
function use_gifsicle {
  local renamed=$(add_sub_extension "$1" $2 "gifsicle")
  ${bin}/gifsicle -O3 "$1" -o "$renamed" > /dev/null 2>&1
  echo_result "$1" $renamed "gifsicle"
}

# jpegoptim (jpg, jpeg)
function use_jpegoptim {
  local renamed=$(add_sub_extension "$1" $2 "jpegoptim")
  cp "$1" "$renamed"
  ${bin}/jpegoptim -q --strip-all -t -o "$renamed" > /dev/null 2>&1
  echo_result "$1" $renamed "jpegoptim"
}

# jpegtran (jpg, jpeg)
function use_jpegtran {
  local renamed=$(add_sub_extension "$1" $2 "jpegtran")
  ${bin}/jpegtran -copy none -optimize -verbose -outfile "$renamed" "$1" > /dev/null 2>&1
  echo_result "$1" $renamed "jpegtran"
}

# ==========================================================================

for file in `find $scope -name "*.bmp"`; do
  echo_file "$file"
  use_optipng "$file" "bmp"
  use_pngout "$file" "bmp"
done

for file in `find $scope -name "*.gif"`; do
  echo_file "$file"
  use_gifsicle "$file" "gif"
done

for file in `find $scope -name "*.png"`; do
  echo_file "$file"
  use_advpng "$file" "png"
  use_pngcrush "$file" "png"
  use_optipng "$file" "png"
  use_pngout "$file" "png"
done

for file in `find $scope -name "*.jpg"`; do
  echo_file "$file"
  use_jpegoptim "$file" "jpg"
  use_jpegtran "$file" "jpg"
done

for file in `find $scope -name "*.jpeg"`; do
  echo_file "$file"
  use_jpegoptim "$file" "jpeg"
  use_jpegtran "$file" "jpeg"
done

for file in `find $scope -name "*.pnm"`; do
  echo_file "$file"
  use_optipng "$file" "pnm"
done

for file in `find $scope -name "*.tiff"`; do
  echo_file "$file"
  use_optipng "$file" "tiff"
done

for file in `find $scope -name "*.pcx"`; do
  echo_file "$file"
  use_pngout "$file" "pcx"
done

for file in `find $scope -name "*.tga"`; do
  echo_file "$file"
  use_pngout "$file" "tga"
done
