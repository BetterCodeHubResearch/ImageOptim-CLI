#!/bin/sh

# Copyright © 2013 Jamie Mason, @GotNoSugarBaby,
# https://github.com/JamieMason

# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# path to image directory we should optimise
imgPath=0

# whether to run ImageAlpha.app before running ImageOptim.app
runImageAlpha="false"

# whether to run JPEGmini.app
runJPEGmini="false"

# whether to quit ImageOptim.app after processing images
quitOnComplete="false"

# path to this script
cliPath="false"

# how long we will wait before checking again if ImageOptim.app is busy
isBusyIntervalLength=1

# image types supported by ImageOptim.app
fileTypes='.*(bmp|gif|jpeg|jpg|pcx|png|pnm|tga|tiff)'

# image types supported by ImageAlpha.app
imageAlphaFileTypes='.*(png)'

# (): Display version number
function version {
  echo "1.4.0"
}

# (): Display usage information
function usage {
  echo "Usage: imageOptim [options]"
  echo ""
  echo "Options:"
  echo ""
  echo "  -d, --directory     directory of images to process"
  echo "  -a, --image-alpha   pre-process PNGs with ImageAlpha.app (http://pngmini.com)"
  echo "  -j, --jpeg-mini     process JPGs with JPEGmini.app (https://itunes.apple.com/us/app/jpegmini/id498944723"
  echo "  -q, --quit          quit ImageOptim.app when complete"
  echo "  -h, --help          output usage information"
  echo "  -e, --examples      output usage examples"
  echo "  -v, --version       output the version number"
}

# (): Display usage examples
function examples {
  echo "Examples:"
  echo ""
  echo "Run ImageOptim"
  echo "$ imageOptim -d path/to/images"
  echo "$ imageOptim --directory path/to/images"
  echo ""
  echo "Run ImageOptim then quit it when finished"
  echo "$ imageOptim -q -d path/to/images"
  echo "$ imageOptim --quit --directory path/to/images"
  echo ""
  echo "Run ImageAlpha then ImageOptim"
  echo "$ imageOptim -a -d path/to/images"
  echo "$ imageOptim --image-alpha --directory path/to/images"
  echo ""
  echo "Run ImageAlpha then ImageOptim then quit ImageOptim when finished"
  echo "$ imageOptim -q -a -d path/to/images"
  echo "$ imageOptim --quit --image-alpha --directory path/to/images"
}

# ($1:message): Display a red error message and quit
function error {
  printf "\e[31m✘ $1"
  echo "\033[0m"
  exit 1
}

# ($1:message): Display a message in green with a tick by it
function success {
  printf "\e[32m✔ ${1}"
  echo "\033[0m"
}

# (): Get a timestamp for the current time
function now {
  date +"%s"
}

# ($1:appName): Get the number of processes in use by an Application
function countProcesses {
  printf $(ps -aef | grep  "[${1:0:1}]${1:1}" | wc -l)
}

# ($1:appName): Sleep until app is done optimising images
function waitFor {
  # wait for App to spawn a few processes
  sleep 2
  # wait until those processes have completed
  while [[ "$(countProcesses "$1")" > "1" ]]; do
    sleep $isBusyIntervalLength
  done
}

# (): How long did ImageOptim.app take to process the images?
function getTimeSpent {
  let timeSpent=endTime-startTime-$isBusyIntervalLength
  echo $timeSpent
}

# (): How many images are in the directory we're about to process?
function getImgCount {
  echo $(find -E "$imgPath" -iregex $fileTypes | wc -l)
}

# (): Send all images to ImageOptim.app for processing
function populateImageOptimQueue {
  find -E "$imgPath" -regex $fileTypes -print0 | while IFS= read -r -d $'\0' img; do
    open -g -a ImageOptim.app "$img"
  done
}

# (): Send all images to ImageOptim.app for processing
function populateImageAlphaQueue {
  find -E "$imgPath" -regex $imageAlphaFileTypes -print0 | while IFS= read -r -d $'\0' img; do
    open -g -a ImageAlpha.app "$img"
  done
}

# Handle Inputs
while [ "$1" != "" ]; do
  case $1 in
    -d | --directory )
      shift;
      imgPath=$1
      ;;
    -a | --image-alpha )
      runImageAlpha="true"
      ;;
    -j | --jpeg-mini )
      runJPEGmini="true"
      ;;
    -q | --quit )
      quitOnComplete="true"
      ;;
    -h | --help )
      usage;
      exit 0
      ;;
    -e | --examples )
      examples;
      exit 0
      ;;
    -v | --version )
      version;
      exit 0
      ;;
    * )
    usage
    exit 1
  esac
  shift
done

# handle override
if [ "false" == $cliPath ]; then
  cliPath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
fi

echo $cliPath
exit

# quit if imgPath is not a directory
if [ ! -d "$imgPath" ]; then
  error "Could not find directory $imgPath"
fi

# quit if ImageOptim is not installed
if [ "ImageOptim.app" != `osascript "$cliPath/imageOptimAppleScriptLib" has_app_installed net.pornel.ImageOptim` ]; then
  error "ImageOptim.app is not installed (http://imageoptim.com)"
fi

if [ "true" == $runImageAlpha ]; then
  if [ "ImageAlpha.app" != `osascript "$cliPath/imageOptimAppleScriptLib" has_app_installed net.pornel.ImageAlpha` ]; then
    error "ImageAlpha.app is not installed (http://pngmini.com)"
  fi
fi

if [ "true" == $runJPEGmini ]; then
  if [ "JPEGmini.app" != `osascript "$cliPath/imageOptimAppleScriptLib" has_app_installed com.icvt.JPEGmini` ]; then
    error "JPEGmini.app is not installed (https://itunes.apple.com/us/app/jpegmini/id498944723)"
  fi
  if [ "1" != `osascript "$cliPath/JPEGmini" check` ]; then
    `osascript "$cliPath/imageOptimAppleScriptLib" has_gui_script`
    error "To automate JPEGmini we need to enable GUI Scripting, check 'Enable access for assistive devices' under Accessibility in System Preferences, then run ImageOptim-CLI again"
  fi
fi

# begin
startTime=$(now)

echo "Processing $(getImgCount) images..."

if [ "true" == $runImageAlpha ]; then
  $(populateImageAlphaQueue)
  $(waitFor "ImageAlpha")
  osascript -e 'tell application "ImageAlpha" to quit'
fi

$(populateImageOptimQueue)
$(waitFor "ImageOptim")

if [ "true" == $runJPEGmini ]; then
  `osascript "$cliPath/imageOptimAppleScriptLib" run_jpegmini $imgPath` > /dev/null 2>&1
fi

endTime=$(now)

if [ "true" == $quitOnComplete ]; then
  osascript -e 'tell application "ImageOptim" to quit'
fi

success "Finished in $(getTimeSpent) seconds" | xargs
