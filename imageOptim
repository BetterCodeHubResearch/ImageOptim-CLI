#!/bin/sh

# Copyright © 2013 Jamie Mason, @GotNoSugarBaby,
# https://github.com/JamieMason

# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# get library of optimisers relative to this file
bin="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/lib"

# the path we should optimise
scope=$1

function init {
  if [ -d $scope ]; then
    echo ""
  else
    echoFail "Could not find $scope"
    exit 1
  fi
}

# ($1:message) -> message
function echoFail {
  printf "\e[31m✘ $1"
  echo "\033[0m"
}

# ($1:message) -> message
function echoPass {
  printf "\e[32m✔ $1"
  echo "\033[0m"
}

# ($1:message) -> message
function echoItem {
  printf "\e[36m$1"
  echo "\033[0m"
}

# ($1:binary, $2:message) -> formatted
function echoIf {
  if [ $1 == 1 ]; then
    echoPass $2
  else
    echoFail $2
  fi
}

# exit if dir to process is missing
init

# ($1:portion, $2:whole) -> percent
function percent {
  local portion=$1
  local whole=$2
  echo $(bc <<< "scale=2; (($portion/$whole)*100)")
}

# ($1:bytes) -> kilobytes
# (1500) -> 1.500
function toKb {
  local bytes=$1
  echo $(bc <<< "scale=3; $bytes/1000")
}

# ($1:larger, $2:smaller) -> difference
function difference {
  local larger=$1
  local smaller=$2
  echo $(bc <<< "scale=3; $larger-$smaller")
}

# ($1:number) -> formatted
# (10000) -> 10,000
function formatNumber {
  local number=$1
  printf "%'.3f\n" $number
}

# ($1:path) -> bytes
# (/path/to/some_file.txt) -> 11496328
function sizeInBytes {
  local path=$1
  stat -f %z "$path"
}

# ($1:path) -> formatted
# (/path/to/some_file.txt) -> 11,496.328 KB
function echoSize {
  local path=$1
  echo $(formatNumber $(toKb $(sizeInBytes "$path")))" KB"
}

# ($1:original, $2:optimised, $3:optimiserName) -> result
# (/path/to/some.jpg, /path/to/some.jpegoptim.jpg, "jpegoptim") -> "jpegoptim: 1.730 KB (84.00%)"
function echoResult {
  local original=$1
  local optimised=$2
  local optimiserName=$3
  local originalSize=$(sizeInBytes "$original")
  local optimisedSize=$(sizeInBytes "$optimised")
  local byteReduction=$(difference $originalSize $optimisedSize)
  local percentageReduction=$(percent $byteReduction $originalSize)
  echoItem "• $optimiserName: $(echoSize $optimised) ($percentageReduction%%)"
}

# ($1:original, $2:extension, $3:subExtension) -> newFilename
# (/path/to/some_file.txt, "txt", "ext") -> "some_file.ext.txt"
function assignNameToCopy {
  local original=$1
  local extension=$2
  local subExtension=$3
  echo "$1" | sed -e "s/\.$extension/.$subExtension.$extension/g"
}

# ($1:file) -> formatted
function echoFile {
  local file=$1
  echo "$file ($(echoSize $file))"
}

# ==========================================================================

# sumOriginal=0
# sumAdvpng=0
# sumGifsicle=0
# sumJpegoptim=0
# sumJpegtran=0
# sumOptipng=0
# sumPngcrush=0
# sumPngout=0

# ($1:memo, $2:originalFile, $3:optimisedFile)
# function incrementOptimisedTotal {
#   echo $(bc <<< "scale=3; ($1+$(difference $1 $2))")
# }

# function totalSavings {
#   echo $(bc <<< "scale=3; ($total-$totalOptimised)")
# }

# function echoTotal {
#   echo "Total: $(formatNumber $(toKb $(totalSavings))) KB ($(percent $total $totalOptimised)%%)"
# }

# ==========================================================================

# optipng (bmp, gif, png, pnm, tiff)
# ($1:file, $2:extension)
function useOptipng {
  local file=$1
  local extension=$2
  local renamed=$(assignNameToCopy "$file" $extension "optipng")

  cp "$file" "$renamed"
  ${bin}/optipng -quiet -o7 "$renamed" > /dev/null 2>&1
  echoResult "$file" $renamed "optipng"
}

# pngout (bmp, gif, jpg, jpeg, pcx, png, tga)
# ($1:file, $2:extension)
function usePngout {
  local file=$1
  local extension=$2
  local renamed=$(assignNameToCopy "$file" $extension "pngout")

  ${bin}/pngout -q -y "$file" "$renamed" > /dev/null 2>&1
  echoResult "$file" $renamed "pngout"
}

# advpng (png)
# ($1:file, $2:extension)
function useAdvpng {
  local file=$1
  local extension=$2
  local renamed=$(assignNameToCopy "$file" $extension "advpng")

  cp "$file" "$renamed"
  ${bin}/advpng --quiet --recompress --shrink-insane "$renamed" > /dev/null 2>&1
  echoResult "$file" $renamed "advpng"
}

# pngcrush (png)
# ($1:file, $2:extension)
function usePngcrush {
  local file=$1
  local extension=$2
  local renamed=$(assignNameToCopy "$file" $extension "pngcrush")

  ${bin}/pngcrush -q -rem allb -brute -force -q "$file" "$renamed" > /dev/null 2>&1
  echoResult "$file" $renamed "pngcrush"
}

# gifsicle (gif)
# ($1:file, $2:extension)
function useGifsicle {
  local file=$1
  local extension=$2
  local renamed=$(assignNameToCopy "$file" $extension "gifsicle")

  ${bin}/gifsicle -O3 "$file" -o "$renamed" > /dev/null 2>&1
  echoResult "$file" $renamed "gifsicle"
}

# jpegoptim (jpg, jpeg)
# ($1:file, $2:extension)
function useJpegoptim {
  local file=$1
  local extension=$2
  local renamed=$(assignNameToCopy "$file" $extension "jpegoptim")

  cp "$file" "$renamed"
  ${bin}/jpegoptim -q --strip-all -t -o "$renamed" > /dev/null 2>&1
  echoResult "$file" $renamed "jpegoptim"
}

# jpegtran (jpg, jpeg)
# ($1:file, $2:extension)
function useJpegtran {
  local file=$1
  local extension=$2
  local renamed=$(assignNameToCopy "$file" $extension "jpegtran")

  ${bin}/jpegtran -copy none -optimize -verbose -outfile "$renamed" "$file" > /dev/null 2>&1
  echoResult "$file" $renamed "jpegtran"
}

# ==========================================================================

for file in `find $scope -name "*.bmp"`; do
  echoFile "$file"
  useOptipng "$file" "bmp"
  usePngout "$file" "bmp"
done

for file in `find $scope -name "*.gif"`; do
  echoFile "$file"
  useGifsicle "$file" "gif"
done

for file in `find $scope -name "*.png"`; do
  echoFile "$file"
  useAdvpng "$file" "png"
  usePngcrush "$file" "png"
  useOptipng "$file" "png"
  usePngout "$file" "png"
done

for file in `find $scope -name "*.jpg"`; do
  echoFile "$file"
  useJpegoptim "$file" "jpg"
  useJpegtran "$file" "jpg"
done

for file in `find $scope -name "*.jpeg"`; do
  echoFile "$file"
  useJpegoptim "$file" "jpeg"
  useJpegtran "$file" "jpeg"
done

for file in `find $scope -name "*.pnm"`; do
  echoFile "$file"
  useOptipng "$file" "pnm"
done

for file in `find $scope -name "*.tiff"`; do
  echoFile "$file"
  useOptipng "$file" "tiff"
done

for file in `find $scope -name "*.pcx"`; do
  echoFile "$file"
  usePngout "$file" "pcx"
done

for file in `find $scope -name "*.tga"`; do
  echoFile "$file"
  usePngout "$file" "tga"
done
